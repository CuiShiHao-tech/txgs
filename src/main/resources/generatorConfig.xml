<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <properties resource="application.properties"/>
    <!--若驱动在maven库中无法拉取（如oracle驱动），使用的本地文件，可使用一下配置将本地jar引入。或在pom中直接配置依赖即可-->
    <!--<classPathEntry location="lib/ojdbc6.jar"/>-->
    <!--<classPathEntry location="lib/mysql-connector-java-5.1.44-bin.jar"/>-->
    <context id="generator1" targetRuntime="MyBatis3">
        <!-- 序列化接口 -->
        <!--<plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>-->
        <!--&lt;!&ndash; 若不使用通用mapper，则将以下三个plugin注释掉，可生成默认格式文件  &ndash;&gt;-->
        <!--&lt;!&ndash;MapperPlugin：           生成继承CommenMapper的Mapper类&ndash;&gt;-->
        <!--&lt;!&ndash;LombokPlugin：           使用lombok的@Data注解，取消生成setter/getter。addStaticPropertyName增加实体类属性名String类型静态变量，addPropertyComment增加注释，addPropertySwaggerAnnotation增加swagger注解&ndash;&gt;-->
        <!--<plugin type="tk.mybatis.mapper.generator.MapperPlugin">-->
            <!--<property name="mappers" value="server.db.common.CommonMapper"/>-->
        <!--</plugin>-->
        <!--&lt;!&ndash;LombokPlugin：使用lombok的@Data注解，取消生成setter/getter。&ndash;&gt;-->
        <!--<plugin type="com.github.missthee.mybatis.generator.plugins.custom.LombokPlugin">-->
            <!--&lt;!&ndash;实体类增加属性名String类型静态变量&ndash;&gt;-->
            <!--<property name="addStaticPropertyName" value="true"/>-->
            <!--&lt;!&ndash;实体类增加注释&ndash;&gt;-->
            <!--<property name="addPropertyComment" value="false"/>-->
            <!--&lt;!&ndash;实体类增加swagger注解&ndash;&gt;-->
            <!--<property name="addPropertySwaggerAnnotation" value="false"/>-->
            <!--&lt;!&ndash;mapper类增加@Component注解&ndash;&gt;-->
            <!--<property name="addMapperClassComponentAnnotation" value="true"/>-->
        <!--</plugin>-->
        <!-- 注释 -->
        <commentGenerator>
            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>
        <jdbcConnection
                driverClass="${spring.datasource.primary.driver-class-name}"
                connectionURL="${spring.datasource.primary.jdbc-url}"
                userId="${spring.datasource.primary.username}"
                password="${spring.datasource.primary.password}" />
        <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制,默认使用type=JavaTypeResolverDefaultImpl-->
        <!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型，先尝试使用Integer，Long，Short来对应，
             为 true时，把JDBC DECIMAL 和 NUMERIC 类型解析为 java.math.BigDecimal -->
        <javaTypeResolver>
            <!--
            true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
            false：默认,
                scale>0;length>18：使用BigDecimal;
                scale=0;length[10,18]：使用Long；
                scale=0;length[5,9]：使用Integer；
                scale=0;length<5：使用Short；
            -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- 生成实体类地址 -->
        <javaModelGenerator targetPackage="server.db.primary.model.map" targetProject="src/main/java">
        </javaModelGenerator>

        <!-- 生成mapper xml文件 -->
        <sqlMapGenerator targetPackage="mybatis.mapper.primary.map" targetProject="src/main/resources">
        </sqlMapGenerator>

        <!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口
        targetPackage/targetProject:同javaModelGenerator
        type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
            1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
            2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
            3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
        注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
        -->
        <javaClientGenerator targetPackage="server.db.primary.mapper.map" targetProject="src/main/java" type="XMLMAPPER">
        </javaClientGenerator>

        <!--
                <table schema="cbmdb" tableName="APP_VERSION"
                       enableCountByExample="false"
                       enableDeleteByExample="false"
                       enableSelectByExample="false"
                       enableUpdateByExample="false"
                />

                        可选：
                        1，schema：数据库的schema；
                        2，catalog：数据库的catalog；
                        3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName
                        4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；
                        5，enableInsert（默认true）：指定是否生成insert语句；
                        6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；
                        7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；
                        8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；
                        9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；
                        10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；
                        11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；
                        12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；
                        13，modelType：参考context元素的defaultModelType，相当于覆盖；
                        14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）
                        15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性

                        注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写； -->
        <!--<table schema="OILDB" tableName="AUTH_ROLE_AUTH_PERMISSION"-->
        <!--enableCountByExample="false"-->
        <!--enableDeleteByExample="false"-->
        <!--enableSelectByExample="false"-->
        <!--enableUpdateByExample="false"-->
        <!--&gt;-->

        <!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate
        <property name="useActualColumnNames" value="false"/>-->
        <!--
        该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候，
        比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等；
        那么就可以设置searchString为"^CUST_"，并使用空白替换，那么生成的Customer对象中的属性名称就不是
        custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email；

        注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的，
        如果使用了columnOverride元素，该属性无效；

        <columnRenamingRule searchString="" replaceString=""/> -->
        <!-- generatedKey用于生成生成主键的方法，
        如果设置了该元素，MBG会在生成的<insert>元素中生成一条正确的<selectKey>元素，该元素可选
        column:主键的列名；
        sqlStatement：要生成的selectKey语句，有以下可选项：
            Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
            DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
            DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1
            Derby     :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()
            HSQLDB    :相当于selectKey的SQL为：CALL IDENTITY()
            Informix  :相当于selectKey的SQL为：select dbinfo('sqlca.sqlerrd1') from systables where tabid=1
            MySql     :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()
            SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()
            SYBASE    :相当于selectKey的SQL为：SELECT @@IDENTITY
            JDBC      :相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性
        <generatedKey column="" sqlStatement=""/> -->
        <!-- 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；
                    column:要重新设置的列名；
                    注意，一个table元素中可以有多个columnOverride元素哈~
                  -->
        <!--<columnOverride column="username">-->
        <!-- 使用property属性来指定列要生成的属性名称
        <property name="property" value="userName"/>
        -->
        <!-- javaType用于指定生成的domain的属性类型，使用类型的全限定名
        <property name="javaType" value=""/>
         -->

        <!-- jdbcType用于指定该列的JDBC类型
        <property name="jdbcType" value=""/>
         -->

        <!-- typeHandler 用于指定该列使用到的TypeHandler，如果要指定，配置类型处理器的全限定名
            注意，mybatis中，不会生成到mybatis-config.xml中的typeHandler
            只会生成类似：where id = #{id,jdbcType=BIGINT,typeHandler=com._520it.mybatis.MyTypeHandler}的参数描述
        <property name="jdbcType" value=""/>
        -->

        <!-- 参考table元素的delimitAllColumns配置，默认为false
        <property name="delimitedColumnName" value=""/>
         -->
        <!--</columnOverride>-->
        <!-- ignoreColumn设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现
                    column:指定要忽略的列的名字；
                    delimitedColumnName：参考table元素的delimitAllColumns配置，默认为false
                    注意，一个table元素中可以有多个ignoreColumn元素
                 <ignoreColumn column="deptId" delimitedColumnName=""/>
        -->
        <!--</table>-->

        <table schema="txgs" tableName="SEAL"
               enableCountByExample="false"
               enableDeleteByExample="false"
               enableSelectByExample="false"
               enableUpdateByExample="false"
        />

    </context>
</generatorConfiguration>
